-- Variables
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local VirtualInputManager = game:GetService("VirtualInputManager")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local running = true

local function findBall()
    for _, model in ipairs(Workspace:GetChildren()) do
        if model:IsA("Model") and model.Name:match("^CLIENT_BALL_") then
            local sphereOrCube = model:FindFirstChild("Sphere.001") or model:FindFirstChild("Cube.001")
            if sphereOrCube and sphereOrCube:IsA("MeshPart") then
                return sphereOrCube
            end
        end
    end
    return nil
end

local function autoPressQ()
    if not running then return end
    local ball = findBall()
    if ball then
        local ballPosition = ball.Position
        local characterPosition = character.PrimaryPart and character.PrimaryPart.Position

        if characterPosition and (ballPosition - characterPosition).Magnitude <= 15 then
            VirtualInputManager:SendKeyEvent(true, "Q", false, game)
            wait(0.01) -- Optional delay to prevent spamming
            VirtualInputManager:SendKeyEvent(false, "Q", false, game)
        end
    end
end

local userInput = game:GetService("UserInputService")
local holdingRightClick = false

userInput.InputBegan:Connect(function(input, gameProcessed)
    if not running then return end
     if (input.UserInputType == Enum.UserInputType.MouseButton2 or input.KeyCode == Enum.KeyCode.ButtonL1) and not gameProcessed then
        holdingRightClick = true
    elseif input.KeyCode == Enum.KeyCode.End then
        running = false
    end
end)

userInput.InputEnded:Connect(function(input, gameProcessed)
    if not running then return end
    if input.UserInputType == Enum.UserInputType.MouseButton2 or input.KeyCode == Enum.KeyCode.ButtonL1 then
        holdingRightClick = false
    end
end)

while running and task.wait() do
    if holdingRightClick then
        autoPressQ()
    end
end
