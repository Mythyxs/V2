-------------------
-- Piecewise function for threshold based on ping
-------------------
local function getThreshold(ping)
    -- Data points you provided (ping, threshold):
    -- 1) (35.02, 0.90)
    -- 2) (60.32, 0.72)
    -- 3) (103.39, 0.55)
    -- 4) (166.75, 0.35)
    -- 5) (174.82, 0.35)
    -- 6) (250.55, 0.15)
    
    -- If you want to "clamp" for very low or very high ping:
    if ping <= 35.02 then
        return 0.90
    elseif ping <= 60.32 then
        -- Linear interpolation between (35.02, 0.90) and (60.32, 0.72)
        local x1, y1 = 35.02, 0.90
        local x2, y2 = 60.32, 0.72
        local slope   = (y2 - y1) / (x2 - x1)
        local offset  = y1 - slope*x1
        return slope*ping + offset

    elseif ping <= 103.39 then
        -- Linear interpolation between (60.32, 0.72) and (103.39, 0.55)
        local x1, y1 = 60.32, 0.72
        local x2, y2 = 103.39, 0.55
        local slope   = (y2 - y1) / (x2 - x1)
        local offset  = y1 - slope*x1
        return slope*ping + offset

    elseif ping <= 166.75 then
        -- Linear interpolation between (103.39, 0.55) and (166.75, 0.35)
        local x1, y1 = 103.39, 0.55
        local x2, y2 = 166.75, 0.35
        local slope   = (y2 - y1) / (x2 - x1)
        local offset  = y1 - slope*x1
        return slope*ping + offset

    elseif ping <= 174.82 then
        -- Both 166.75 and 174.82 have 0.35 => zero slope
        -- We'll treat it as a flat line at 0.35
        return 0.35

    elseif ping <= 250.55 then
        -- Linear interpolation between (174.82, 0.35) and (250.55, 0.15)
        local x1, y1 = 174.82, 0.35
        local x2, y2 = 250.55, 0.15
        local slope   = (y2 - y1) / (x2 - x1)
        local offset  = y1 - slope*x1
        return slope*ping + offset
    else
        -- Above 250.55 ms, clamp to 0.15
        return 0.15
    end
end

-------------------
-- Aimbot script
-------------------

local aimbotEnabled = false
-- Toggles the aimbot
function autotime(state)
    aimbotEnabled = state
    if not aimbotEnabled then
        return
    end
    
    while aimbotEnabled do
        local currentPing = game.Stats.Network.ServerStatsItem["Data Ping"]:GetValue()
        
        local threshold = getThreshold(currentPing)
        
        -- Check if we have the ShotMeterTiming object
        local char = workspace[game.Players.LocalPlayer.Name]
        local shotMeterValue = char.Properties.ShotMeter.Value
        if shotMeterValue > threshold and shotMeterValue < 2 then
            local args = {
                [1] = "Shoot",
                [2] = false
            }
            game:GetService("ReplicatedStorage"):WaitForChild("Game.Properties"):WaitForChild("ClientEvent"):FireServer(unpack(args))
        end
        
        task.wait() -- short delay so we donâ€™t spam
    end
end

-- Terminate the script
function terminateScript()
    aimbotEnabled = false
    script:Destroy()
end

-- Press 'End' key to terminate
game:GetService("UserInputService").InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.End then
        terminateScript()
    end
end)

-- Enable the aimbot by default
autotime(true)
