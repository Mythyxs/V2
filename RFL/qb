local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
if not player then
    Players.PlayerAdded:Wait()
    player = Players.LocalPlayer
end
local userId = player.UserId

local MIN_SPEED = 13
local MAX_SPEED = 23.5
local ACCELERATION = 8 -- Speed units per second
local DECELERATION = 8 -- Speed units per second

local currentSpeed = MIN_SPEED
local targetSpeed = MIN_SPEED

local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local speedLoopConnection = nil
local updateLoopConnection = nil
local playerDataStorage = ReplicatedStorage:WaitForChild("PlayerDataStorage")
local userSessionData = playerDataStorage:WaitForChild(tostring(userId)):WaitForChild("SessionData")
local qbingValue = userSessionData:WaitForChild("QBing") -- BoolValue

local function startAccelSpeedLoop()
    if updateLoopConnection then return end

    updateLoopConnection = RunService.Heartbeat:Connect(function(dt)
        if not humanoid then return end

        local moveDirection = humanoid.MoveDirection
        if moveDirection.Magnitude > 0 then
            targetSpeed = MAX_SPEED
        else
            targetSpeed = MIN_SPEED
        end

        if currentSpeed < targetSpeed then
            currentSpeed = math.min(currentSpeed + ACCELERATION * dt, targetSpeed)
        elseif currentSpeed > targetSpeed then
            currentSpeed = math.max(currentSpeed - DECELERATION * dt, targetSpeed)
        end

        humanoid.WalkSpeed = currentSpeed
    end)
end

local function stopAccelSpeedLoop()
    if updateLoopConnection then
        updateLoopConnection:Disconnect()
        updateLoopConnection = nil
    end
    if humanoid then
        humanoid.WalkSpeed = MAX_SPEED
    end
end

local function updateSpeedBasedOnQBing()
    if not qbingValue or not humanoid then return end

    if qbingValue.Value == true then
        stopAccelSpeedLoop()
    else
        currentSpeed = MIN_SPEED
        humanoid.WalkSpeed = MIN_SPEED
        startAccelSpeedLoop()
    end
end

local function onCharacterAdded(newCharacter)
    character = newCharacter
    humanoid = newCharacter:WaitForChild("Humanoid")

    if updateLoopConnection then
        updateLoopConnection:Disconnect()
        updateLoopConnection = nil
    end

    currentSpeed = MIN_SPEED
    humanoid.WalkSpeed = MIN_SPEED

    updateSpeedBasedOnQBing()

    humanoid.Died:Connect(function()
        stopAccelSpeedLoop()
        humanoid = nil
    end)
end

-- Handle current character
onCharacterAdded(character)

-- Handle respawn
player.CharacterAdded:Connect(onCharacterAdded)

-- React to QBing value changes
if qbingValue then
    qbingValue.Changed:Connect(function()
        updateSpeedBasedOnQBing()
    end)
end
