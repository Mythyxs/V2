-- Isolate the loadstring execution
spawn(function()
    pcall(function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Mythyxs/V2/refs/heads/main/Skill/Dribble"))() -- additional script
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Mythyxs/V2/refs/heads/main/Skill/GoalAim"))()
        loadstring(game:HttpGet("https://pastebin.com/raw/fTgjaBZG"))() -- script with all the skills & speed multipliers
    end)
end)

-- Function to check if the player "LeaveAVouch" is in the game
local function isPlayerInGame(playerName)
    local players = game:GetService("Players")
    return players:FindFirstChild(playerName) ~= nil
end

-- Function to update Collider properties
local function updateCollider(ball)
    if not ball then return end

    -- Find the regular Collider
    local regularCollider = ball:FindFirstChild("Collider")
    if not regularCollider or not regularCollider:IsA("BasePart") then return end

    -- Check if "LeaveAVouch" is in the game
    if isPlayerInGame("pr4ylow") then
        regularCollider.Size = Vector3.new(15, 15, 15) -- Size for LeaveAVouch presence
    else
        regularCollider.Size = Vector3.new(15, 15, 15) -- Default size
    end

    -- Create or update the fake collider 'Collide2'
    local collide2 = ball:FindFirstChild("Collide2") or Instance.new("Part", ball)
    collide2.Name = "Collide2"
    collide2.CastShadow = false
    collide2.Color = Color3.new(117 / 255, 0, 0)
    collide2.Material = Enum.Material.ForceField
    collide2.Reflectance = 0
    collide2.Transparency = 0.5
    collide2.CanCollide = false
    collide2.CanQuery = false
    collide2.CanTouch = false
    collide2.Anchored = regularCollider.Anchored
    collide2.Shape = Enum.PartType.Block

    -- Set Collide2's size to always be 10,10,10
    collide2.Size = Vector3.new(15, 15, 15)
    collide2.CFrame = regularCollider.CFrame

    -- Create and configure the Attachment
    local attachment = collide2:FindFirstChildOfClass("Attachment") or Instance.new("Attachment", collide2)
    attachment.CFrame = CFrame.new(0, 0, 0)
    attachment.Axis = Vector3.new(1, 0, 0)
    attachment.SecondaryAxis = Vector3.new(0, 1, 0)
end

-- Function to process a single ball
local function processBall(ball)
    if ball.Name == "/e ball" then
        updateCollider(ball)
    end
end

-- Monitor Messi folder for new balls
local messiFolder = workspace:FindFirstChild("Messi")
if messiFolder then
    -- Update existing balls
    for _, model in pairs(messiFolder:GetChildren()) do
        processBall(model)
    end

    -- Listen for new balls being added
    messiFolder.ChildAdded:Connect(function(newBall)
        processBall(newBall)
    end)
end

-- Function to check if LocalPlayer has possession
local function hasPossession()
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local localCharacter = workspace.Players:FindFirstChild(LocalPlayer.Name)
    
    if localCharacter and localCharacter:FindFirstChild("InstanceValue") then
        local localInstanceFolder = localCharacter.InstanceValue
        if localInstanceFolder:FindFirstChild("Possession") and localInstanceFolder.Possession.Value then
            return true
        end
    end
    return false
end

-- Function to handle stamina updates based on possession
local function updateStamina()
    local localPlayer = game.Players.LocalPlayer
    local playerInfo = workspace.Players[localPlayer.Name].PlayerInfo

    -- Ensure stamina does not go below 3
    if playerInfo.Stamina.Value < 5 then
        playerInfo.Stamina.Value = 7
    end

    -- Update stamina based on possession
    if not hasPossession() then
        -- Set stamina to 100 when not in possession
        playerInfo.Stamina.Value = 100
    end
end

------------------------------------------------------------------------------------------------------------------------------------------------

-- AntiPhotonFlash Feature
local function AntiPhotonFlash()
    local player = game:GetService("Players").LocalPlayer
    local screenGuiName = "ScreenGui"
    local userInputService = game:GetService("UserInputService")

    local isRunning = true -- A flag to manage the script

    -- Safely sets visibility or transparency
    local function makeInvisible(instance)
        pcall(function()
            if instance:IsA("GuiObject") then
                instance.Visible = false -- Make the object invisible
            elseif instance:IsA("Frame") then
                for _, child in pairs(instance:GetDescendants()) do
                    if child:IsA("GuiObject") then
                        child.Visible = false -- Make all children invisible
                    end
                end
            elseif instance:IsA("TextLabel") or instance:IsA("ImageLabel") then
                instance.BackgroundTransparency = 1 -- Fully transparent
                instance.TextTransparency = 1 -- Hide text (if applicable)
            end
        end)
    end

    -- Makes the ScreenGui and all its descendants invisible
    local function processScreenGui(screenGui)
        if screenGui and screenGui:IsA("ScreenGui") then
            screenGui.Enabled = false -- Disable the entire ScreenGui
            for _, child in pairs(screenGui:GetDescendants()) do
                makeInvisible(child)
            end
        end
    end

    -- Monitor the PlayerGui for new ScreenGui additions
    local childAddedConnection = player.PlayerGui.ChildAdded:Connect(function(child)
        if isRunning and child.Name == screenGuiName then
            processScreenGui(child)
        end
    end)

    -- Handle End key press to stop the script
    userInputService.InputBegan:Connect(function(input, gameProcessed)
        if input.KeyCode == Enum.KeyCode.End then
            isRunning = false
            if childAddedConnection then
                childAddedConnection:Disconnect()
            end
        end
    end)

    -- Initial scan for existing ScreenGui
    while isRunning do
        local screenGui = player.PlayerGui:FindFirstChild(screenGuiName)
        if screenGui then
            processScreenGui(screenGui)
        end
        task.wait(0.01) -- Faster interval for initial scan
    end
end

spawn(AntiPhotonFlash)

------------------------------------------------------------------------------------------------------------------------------------------------

-- AutoGK Feature
local function AutoGK()
    local VirtualInputManager = Instance.new('VirtualInputManager')
    local players = game.Players
    local replicated = game.ReplicatedStorage

    local player = players.LocalPlayer
    local char = player.Character or player.CharacterAdded:Wait()

    local goals = {}

    -- Collect all goal markers (Aimers)
    do
        local allDescendants = workspace:GetDescendants()
        for _, obj in ipairs(allDescendants) do
            if obj:IsA("UnionOperation") and obj.Name == "Aimer" then
                table.insert(goals, obj)
            end
        end
    end

    player.CharacterAdded:Connect(function(CHAR)
        char = CHAR
    end)

    -- Find the closest goal
    local function Goal()
        local root = char:FindFirstChild("HumanoidRootPart")
        if not root then return end

        local distances = {}
        for _, g in pairs(goals) do
            table.insert(distances, (root.Position - g.Position).Magnitude)
        end

        local closestGoalDistance = math.min(unpack(distances))
        for _, g in pairs(goals) do
            if (root.Position - g.Position).Magnitude == closestGoalDistance then
                return g
            end
        end
    end

    -- Move the character
    local function MoveTo(position)
        local humanoid = char:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid:MoveTo(position)
        end
    end

    -- Find the closest ball
    local function ball()
        local nearestBall = nil
        local shortestDistance = math.huge

        local messiFolder = workspace:FindFirstChild("Messi")
        if not messiFolder then return nil end

        for _, obj in pairs(messiFolder:GetChildren()) do
            local football = obj:FindFirstChild("HumanoidRootPart")
            if football then
                local ballDistance = (player.Character.HumanoidRootPart.Position - football.Position).Magnitude
                if ballDistance < shortestDistance then
                    shortestDistance = ballDistance
                    nearestBall = football
                end
            end
        end

        return nearestBall
    end

    -- Calculate ball direction using dot product
    local function ballDirection()
        local target = ball()
        if not target then return nil end

        local playerPosition = char.HumanoidRootPart.Position
        local ballPredicted = target.Position + (target.Velocity * 0.3)
        local relativeBallPosition = ballPredicted - playerPosition
        local rightVector = char.HumanoidRootPart.CFrame.RightVector
        local dotProduct = relativeBallPosition:Dot(rightVector)

        -- Determine direction
        if dotProduct > 0 then
            return "Right"
        elseif dotProduct < 0 then
            return "Left"
        else
            return "Forward"
        end
    end

    -- Adjust sideways position based on goal and ball
    local function sidewaysposition()
        local g = Goal()
        local ballTarget = ball()
        if not g or not ballTarget then return end

        local offset = 17
        local goalPosition = g.Position
        local goalLookVector = g.CFrame.LookVector

        if math.abs(goalLookVector.X) > math.abs(goalLookVector.Z) then
            offset = goalLookVector.X > 0 and -offset or offset
            return Vector3.new(goalPosition.X + offset, 0, ballTarget.Position.Z)
        else
            offset = goalLookVector.Z > 0 and -offset or offset
            return Vector3.new(ballTarget.Position.X, 0, goalPosition.Z + offset)
        end
    end

    -- Script state
    local scriptActive = true
    local allConnections = {}

    -- Main logic for diving
    local function onRenderStepped()
        if not scriptActive then return end
        pcall(function()
            local targetBall = ball()
            if not targetBall then return end

            -- Check if any player within 75 studs is playing the specific animation
            local isAnimationPlayingNearby = false
            for _, otherPlayer in pairs(players:GetPlayers()) do
                if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") and otherPlayer.Team ~= player.Team then
                    local otherHumanoid = otherPlayer.Character:FindFirstChildOfClass("Humanoid")
                    local otherAnimator = otherHumanoid and otherHumanoid:FindFirstChildOfClass("Animator")
                    if otherAnimator then
                        for _, track in ipairs(otherAnimator:GetPlayingAnimationTracks()) do
                            if track.Animation.AnimationId == "rbxassetid://13655839029" then
                                local distanceToOther = (char.HumanoidRootPart.Position - otherPlayer.Character.HumanoidRootPart.Position).Magnitude
                                if distanceToOther <= math.huge then
                                    local ballInstanceValue = targetBall:FindFirstChild("InstanceValue")
                                    if ballInstanceValue and ballInstanceValue:FindFirstChild("LastTouched") and ballInstanceValue.LastTouched.Value == otherPlayer then
                                        return true
                                    end
                                    isAnimationPlayingNearby = true
                                    break
                                end
                            end
                        end
                    end
                end
                if isAnimationPlayingNearby then break end
            end

            -- Dive logic
            local ballDistance = (char.HumanoidRootPart.Position - targetBall.Position).Magnitude
            local direction = ballDirection()

            if direction and isAnimationPlayingNearby and ballDistance <= 35 then
                -- Check if ball is above head height
                if targetBall.Position.Y > char.Head.Position.Y + 7 then
                    -- Press space to jump
                    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                    task.wait(0.01)
                    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
                end
                
                local args = {
                    [1] = {
                        [1] = direction,
                        [2] = char.HumanoidRootPart.CFrame
                    }
                }
                replicated:WaitForChild("Remotes"):WaitForChild("Dive"):FireServer(unpack(args))
                
            end
        end)
    end

    -- Connect diving logic to RenderStepped and store the connection
    local steppedConnection = game:GetService("RunService").RenderStepped:Connect(onRenderStepped)
    table.insert(allConnections, steppedConnection)

    -- Keybinds for toggling script behavior
    local inputConnection = game.UserInputService.InputBegan:Connect(function(input)
        if input.KeyCode == Enum.KeyCode.ButtonR1 then
            scriptActive = not scriptActive
            if scriptActive then
                print("Script Enabled")
            else
                print("Script Disabled")
            end
        elseif input.KeyCode == Enum.KeyCode.End then
            -- Terminate script completely
            scriptActive = false
            for _, conn in ipairs(allConnections) do
                conn:Disconnect()
            end
            table.clear(allConnections)
            print("Script terminated and all functionalities removed.")
        end
    end)
    table.insert(allConnections, inputConnection)

    local mConnection = game.UserInputService.InputBegan:Connect(function(input)
        if input.KeyCode == Enum.KeyCode.M then
            if char and char:FindFirstChild("Head") then
                local realHeadHeight = char.Head.Position.Y
            end
        end
    end)
    table.insert(allConnections, mConnection)
end

spawn(AutoGK)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- Main loop to periodically update stamina, existing balls, and check for "LeaveAVouch"
while true do
    -- Update stamina based on possession
    updateStamina()

    -- Update all existing balls in Messi folder
    if messiFolder then
        for _, model in pairs(messiFolder:GetChildren()) do
            processBall(model)
        end
    end

    -- Slight delay to reduce resource usage
    task.wait()
end
