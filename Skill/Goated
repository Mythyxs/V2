-- Isolate the loadstring execution
spawn(function()
    pcall(function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Mythyxs/V2/refs/heads/main/Skill/Dribble"))() -- additional script
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Mythyxs/V2/refs/heads/main/Skill/GoalAim"))()
        loadstring(game:HttpGet("https://pastebin.com/raw/fTgjaBZG"))() -- script with all the skills & speed multipliers
    end)
end)

-- Function to check if the player "LeaveAVouch" is in the game
local function isPlayerInGame(playerName)
    local players = game:GetService("Players")
    return players:FindFirstChild(playerName) ~= nil
end

-- Function to update Collider properties
local function updateCollider(ball)
    if not ball then return end

    -- Find the regular Collider
    local regularCollider = ball:FindFirstChild("Collider")
    if not regularCollider or not regularCollider:IsA("BasePart") then return end

    -- Check if "LeaveAVouch" is in the game
    if isPlayerInGame("pr4ylow") then
        regularCollider.Size = Vector3.new(8, 8, 8) -- Size for LeaveAVouch presence
    else
        regularCollider.Size = Vector3.new(15, 15, 15) -- Default size
    end

    -- Create or update the fake collider 'Collide2'
    local collide2 = ball:FindFirstChild("Collide2") or Instance.new("Part", ball)
    collide2.Name = "Collide2"
    collide2.CastShadow = false
    collide2.Color = Color3.new(117 / 255, 0, 0)
    collide2.Material = Enum.Material.ForceField
    collide2.Reflectance = 0
    collide2.Transparency = 1
    collide2.CanCollide = false
    collide2.CanQuery = false
    collide2.CanTouch = false
    collide2.Anchored = regularCollider.Anchored
    collide2.Shape = Enum.PartType.Block

    -- Set Collide2's size to always be 10,10,10
    collide2.Size = Vector3.new(15, 15, 15)
    collide2.CFrame = regularCollider.CFrame

    -- Create and configure the Attachment
    local attachment = collide2:FindFirstChildOfClass("Attachment") or Instance.new("Attachment", collide2)
    attachment.CFrame = CFrame.new(0, 0, 0)
    attachment.Axis = Vector3.new(1, 0, 0)
    attachment.SecondaryAxis = Vector3.new(0, 1, 0)
end

-- Function to process a single ball
local function processBall(ball)
    if ball.Name == "/e ball" then
        updateCollider(ball)
    end
end

-- Monitor Messi folder for new balls
local messiFolder = workspace:FindFirstChild("Messi")
if messiFolder then
    -- Update existing balls
    for _, model in pairs(messiFolder:GetChildren()) do
        processBall(model)
    end

    -- Listen for new balls being added
    messiFolder.ChildAdded:Connect(function(newBall)
        processBall(newBall)
    end)
end

-- Function to check if LocalPlayer has possession
local function hasPossession()
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local localCharacter = workspace.Players:FindFirstChild(LocalPlayer.Name)
    
    if localCharacter and localCharacter:FindFirstChild("InstanceValue") then
        local localInstanceFolder = localCharacter.InstanceValue
        if localInstanceFolder:FindFirstChild("Possession") and localInstanceFolder.Possession.Value then
            return true
        end
    end
    return false
end

-- Function to handle stamina updates based on possession
local function updateStamina()
    local localPlayer = game.Players.LocalPlayer
    local playerInfo = workspace.Players[localPlayer.Name].PlayerInfo

    -- Ensure stamina does not go below 3
    if playerInfo.Stamina.Value < 5 then
        playerInfo.Stamina.Value = 7
    end

    -- Update stamina based on possession
    if not hasPossession() then
        -- Set stamina to 100 when not in possession
        playerInfo.Stamina.Value = 100
    end
end

------------------------------------------------------------------------------------------------------------------------------------------------

-- AntiPhotonFlash Feature
local function AntiPhotonFlash()
    local player = game:GetService("Players").LocalPlayer
    local screenGuiName = "ScreenGui"
    local userInputService = game:GetService("UserInputService")

    local isRunning = true -- A flag to manage the script

    -- Safely sets visibility or transparency
    local function makeInvisible(instance)
        pcall(function()
            if instance:IsA("GuiObject") then
                instance.Visible = false -- Make the object invisible
            elseif instance:IsA("Frame") then
                for _, child in pairs(instance:GetDescendants()) do
                    if child:IsA("GuiObject") then
                        child.Visible = false -- Make all children invisible
                    end
                end
            elseif instance:IsA("TextLabel") or instance:IsA("ImageLabel") then
                instance.BackgroundTransparency = 1 -- Fully transparent
                instance.TextTransparency = 1 -- Hide text (if applicable)
            end
        end)
    end

    -- Makes the ScreenGui and all its descendants invisible
    local function processScreenGui(screenGui)
        if screenGui and screenGui:IsA("ScreenGui") then
            screenGui.Enabled = false -- Disable the entire ScreenGui
            for _, child in pairs(screenGui:GetDescendants()) do
                makeInvisible(child)
            end
        end
    end

    -- Monitor the PlayerGui for new ScreenGui additions
    local childAddedConnection = player.PlayerGui.ChildAdded:Connect(function(child)
        if isRunning and child.Name == screenGuiName then
            processScreenGui(child)
        end
    end)

    -- Handle End key press to stop the script
    userInputService.InputBegan:Connect(function(input, gameProcessed)
        if input.KeyCode == Enum.KeyCode.End then
            isRunning = false
            if childAddedConnection then
                childAddedConnection:Disconnect()
            end
        end
    end)

    -- Initial scan for existing ScreenGui
    while isRunning do
        local screenGui = player.PlayerGui:FindFirstChild(screenGuiName)
        if screenGui then
            processScreenGui(screenGui)
        end
        task.wait(0.01) -- Faster interval for initial scan
    end
end

spawn(AntiPhotonFlash)

------------------------------------------------------------------------------------------------------------------------------------------------

local function AutoGK()
    local VirtualInputManager = Instance.new('VirtualInputManager')
    local players = game.Players
    local replicated = game.ReplicatedStorage
    local player = players.LocalPlayer
    local char = player.Character or player.CharacterAdded:Wait()

    local goals = {}

    do
        local a = workspace:GetDescendants()

        for x = 1, #a do
            if (a[x]:IsA("Part") and a[x].Name == "COLLIDABLE") then
                table.insert(goals, a[x])
            end
        end
    end

    local function Goal()

        local root = game.Players.LocalPlayer.Character.HumanoidRootPart
        local D = {}
    
        for _, goal in pairs(goals) do
            table.insert(D, (root.Position - goal.Position).magnitude)
        end
    
        local closegoal = math.min(unpack(D))
    
        for _, goal in pairs(goals) do
            local d = (root.Position - goal.Position).magnitude
    
    
            if (d == closegoal) then
                return goal
            end
        end
    end
    

    local function ball()
        local nearestball = nil
        local shortestDistance = math.huge
        

        local messiFolder = workspace:FindFirstChild("Messi")
        if not messiFolder then return nil end

        for _, obj in pairs(messiFolder:GetChildren()) do
            local football = obj:FindFirstChild("HumanoidRootPart")

            local currentVelocity = (football.Velocity).unit
            local directionToOther = (football.Position - Goal().Position).unit

            local isVelocityPointingAway = currentVelocity:Dot(directionToOther)
            if football and not obj.InstanceValue:FindFirstChild("Possession") and isVelocityPointingAway<=-0.7 then
                local balldistance = (player.Character.HumanoidRootPart.Position - football.Position).Magnitude
                if balldistance < shortestDistance then
                    shortestDistance = balldistance
                    nearestball = football
                end
            end
        end
        return nearestball
    end

    local function XZ(V)
        return Vector3.new(V.X, 0, V.Z)
    end

    local part = Instance.new("Part")
    part.Size = Vector3.new(2, 2, 2)
    part.Shape = Enum.PartType.Ball
    part.Anchored = true
    part.Parent = workspace
    part.Transparency = 1
    part.Material = Enum.Material.Neon
    part.CanCollide=false

    local part2 = Instance.new("Part")
    part2.Size = Vector3.new(2, 2, 2)
    part2.Shape = Enum.PartType.Ball
    part2.Anchored = true
    part2.Parent = workspace
    part2.Transparency = 1
    part2.Material = Enum.Material.Neon
    part2.Color = Color3.new(0.5,0,0)
    part2.CanCollide=false


    local function LANDINGPOS(velocity, position,multipler)
        local acceleration = -workspace.Gravity
        local timeToLand = (-velocity.y - math.sqrt(velocity.y * velocity.y - 4 * 0.5 * acceleration * position.y)) / (2 * 0.5 * acceleration)
        local horizontalVelocity = Vector3.new(velocity.x, 0, velocity.z)
        local landingPosition = position + horizontalVelocity * timeToLand + Vector3.new(0, -position.y, 0)
        return landingPosition, horizontalVelocity * timeToLand
    end    

    local lastVelocity = Vector3.new(0,0,0)

    local function Test(velocity, position)
        local distance = (XZ(char.HumanoidRootPart.Position-position)).Magnitude
        local horizontalVelocity = (Vector3.new(velocity.x, 0, velocity.z)).unit
        local speed = horizontalVelocity.Magnitude
        local t = distance/speed
        local landingPosition = position + (velocity).unit*t
        local acceleration = (horizontalVelocity*t-lastVelocity).unit
        return landingPosition, horizontalVelocity*t, acceleration*t
    end    

    local lastVelocity = Vector3.new(0,0,0)
    local function ballDirection()
        local target = ball()
        if not target then return nil end
        target.Parent.Collider.Size = Vector3.new(8,8,8)

        local FinalPosition, FinalVelocity, FinalAcceleration = Test(target.Velocity, target.Position)

        local playerpos = char.HumanoidRootPart.Position
        local ballpredict = FinalPosition
        local acceleration = (FinalVelocity-lastVelocity)

        local relativeballpos = (ballpredict - playerpos).unit
        local rightvec = char.HumanoidRootPart.CFrame.RightVector
        local dot = relativeballpos:Dot(rightvec)

        part2.Position = target.Position+FinalAcceleration
        part.Position = FinalPosition

        local balldistance = (FinalPosition-target.Position+FinalAcceleration).Magnitude
        --print(balldistance) 
        --print((FinalVelocity-lastVelocity).Magnitude)
        --[[
        local FinalPosition2 = target.Position+target.Velocity

        local relativeballpos2 = (FinalPosition2 - playerpos).unit
        local dot2 = relativeballpos2:Dot(rightvec)
        ]]--

        local speed = XZ(target.Velocity).Magnitude
        --print(speed)
        local dotMin = 0.05

        if balldistance<=70 or speed >= 135 then
            if dot > dotMin then
                return "Right", FinalVelocity, FinalPosition, target.Position+FinalAcceleration
            elseif dot < -dotMin then
                return "Left", FinalVelocity, FinalPosition, target.Position+FinalAcceleration
            end
        end
        return "Forward", FinalVelocity, FinalPosition, target.Position+FinalAcceleration
    end

    local scripton = true
    local everything = {}

    local function render()
        if not scripton then return end

        local targetball = ball()
        if not targetball then return end
        local balldistance = (char.HumanoidRootPart.Position - targetball.Position).Magnitude
        local direction, FinalVelocity, FinalPosition, FinalPosAccel = ballDirection()

        local FastEnough = targetball.Velocity.Magnitude>=60
        
        if direction and balldistance <= 60 then
            local args = {
                [1] = {
                    [1] = direction,
                    [2] = char.HumanoidRootPart.CFrame
                }
            }
            if FastEnough then
                if direction~="Forward" then
                    replicated:WaitForChild("Remotes"):WaitForChild("Dive"):FireServer(unpack(args))
                end
                --[[
                if FinalPosition.Y > char.Head.Position.Y+25 then
                    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                    delay(0.1, function()
                        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
                    end)
                end
                ]]--
            end
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 50
            char.Humanoid:MoveTo(FinalPosAccel)
        end
        lastVelocity=FinalVelocity
    end

    local steppedconnect = game:GetService("RunService").RenderStepped:Connect(render)
    table.insert(everything, steppedconnect)

    local inputconnect = game.UserInputService.InputBegan:Connect(function(input)
        if input.KeyCode == Enum.KeyCode.ButtonR1 then
            scripton = not scripton
            if scripton then
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Skillful: On";
                    Text = "On"; 
                    Duration = 0.05;
                })
            else
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Skillful: Off";
                    Text = "Off"; 
                    Duration = 0.05;
                })
            end
        elseif input.KeyCode == Enum.KeyCode.End then
            scripton = false
            if part then
                part:Destroy()
                part2:Destroy()
            end
            for _, conn in ipairs(everything) do
                conn:Disconnect()
            end
            table.clear(everything)
            
        end
    end)
    table.insert(everything, inputconnect)

 
    table.insert(everything, mConnection)
end

spawn(AutoGK)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- Main loop to periodically update stamina, existing balls, and check for "LeaveAVouch"
while true do
    -- Update stamina based on possession
    updateStamina()

    -- Update all existing balls in Messi folder
    if messiFolder then
        for _, model in pairs(messiFolder:GetChildren()) do
            processBall(model)
        end
    end

    -- Slight delay to reduce resource usage
    task.wait()
end
